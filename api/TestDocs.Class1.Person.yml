### YamlMime:ManagedReference
items:
- uid: TestDocs.Class1.Person
  commentId: T:TestDocs.Class1.Person
  id: Class1.Person
  parent: TestDocs
  children:
  - TestDocs.Class1.Person.#ctor(System.String,System.String)
  - TestDocs.Class1.Person.FirstName
  - TestDocs.Class1.Person.LastName
  langs:
  - csharp
  - vb
  name: Class1.Person
  nameWithType: Class1.Person
  fullName: TestDocs.Class1.Person
  type: Class
  source:
    remote:
      path: Class1.cs
      branch: master
      repo: https://github.com/ZrekZ/TestDocs.git
    id: Person
    path: Class1.cs
    startLine: 169
  assemblies:
  - TestDocs
  namespace: TestDocs
  summary: "\nThis is an example of a positional record.\n"
  remarks: "\nThere isn&apos;t a way to add XML comments for properties\ncreated for positional records, yet. The language\ndesign team is still considering what tags should\nbe supported, and where. Currently, you can use\nthe &quot;param&quot; tag to describe the parameters to the\nprimary constructor.\n"
  example: []
  syntax:
    content: 'public class Person : IEquatable<Class1.Person>'
    content.vb: >-
      Public Class Person
          Implements IEquatable(Of Class1.Person)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{TestDocs.Class1.Person}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TestDocs.Class1.Person.#ctor(System.String,System.String)
  commentId: M:TestDocs.Class1.Person.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: TestDocs.Class1.Person
  langs:
  - csharp
  - vb
  name: Person(String, String)
  nameWithType: Class1.Person.Person(String, String)
  fullName: TestDocs.Class1.Person.Person(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: Class1.cs
      branch: master
      repo: https://github.com/ZrekZ/TestDocs.git
    id: .ctor
    path: Class1.cs
    startLine: 169
  assemblies:
  - TestDocs
  namespace: TestDocs
  summary: "\nThis is an example of a positional record.\n"
  remarks: "\nThere isn&apos;t a way to add XML comments for properties\ncreated for positional records, yet. The language\ndesign team is still considering what tags should\nbe supported, and where. Currently, you can use\nthe &quot;param&quot; tag to describe the parameters to the\nprimary constructor.\n"
  example: []
  syntax:
    content: public Person(string FirstName, string LastName)
    parameters:
    - id: FirstName
      type: System.String
      description: "\nThis tag will apply to the primary constructor parameter.\n"
    - id: LastName
      type: System.String
      description: "\nThis tag will apply to the primary constructor parameter.\n"
    content.vb: Public Sub New(FirstName As String, LastName As String)
  overload: TestDocs.Class1.Person.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TestDocs.Class1.Person.FirstName
  commentId: P:TestDocs.Class1.Person.FirstName
  id: FirstName
  parent: TestDocs.Class1.Person
  langs:
  - csharp
  - vb
  name: FirstName
  nameWithType: Class1.Person.FirstName
  fullName: TestDocs.Class1.Person.FirstName
  type: Property
  source:
    remote:
      path: Class1.cs
      branch: master
      repo: https://github.com/ZrekZ/TestDocs.git
    id: FirstName
    path: Class1.cs
    startLine: 169
  assemblies:
  - TestDocs
  namespace: TestDocs
  syntax:
    content: public string FirstName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property FirstName As String
  overload: TestDocs.Class1.Person.FirstName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: TestDocs.Class1.Person.LastName
  commentId: P:TestDocs.Class1.Person.LastName
  id: LastName
  parent: TestDocs.Class1.Person
  langs:
  - csharp
  - vb
  name: LastName
  nameWithType: Class1.Person.LastName
  fullName: TestDocs.Class1.Person.LastName
  type: Property
  source:
    remote:
      path: Class1.cs
      branch: master
      repo: https://github.com/ZrekZ/TestDocs.git
    id: LastName
    path: Class1.cs
    startLine: 169
  assemblies:
  - TestDocs
  namespace: TestDocs
  syntax:
    content: public string LastName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property LastName As String
  overload: TestDocs.Class1.Person.LastName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: TestDocs
  commentId: N:TestDocs
  name: TestDocs
  nameWithType: TestDocs
  fullName: TestDocs
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{TestDocs.Class1.Person}
  commentId: T:System.IEquatable{TestDocs.Class1.Person}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Class1.Person>
  nameWithType: IEquatable<Class1.Person>
  fullName: System.IEquatable<TestDocs.Class1.Person>
  nameWithType.vb: IEquatable(Of Class1.Person)
  fullName.vb: System.IEquatable(Of TestDocs.Class1.Person)
  name.vb: IEquatable(Of Class1.Person)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TestDocs.Class1.Person
    name: Class1.Person
    nameWithType: Class1.Person
    fullName: TestDocs.Class1.Person
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TestDocs.Class1.Person
    name: Class1.Person
    nameWithType: Class1.Person
    fullName: TestDocs.Class1.Person
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TestDocs.Class1.Person.#ctor*
  commentId: Overload:TestDocs.Class1.Person.#ctor
  name: Person
  nameWithType: Class1.Person.Person
  fullName: TestDocs.Class1.Person.Person
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TestDocs.Class1.Person.FirstName*
  commentId: Overload:TestDocs.Class1.Person.FirstName
  name: FirstName
  nameWithType: Class1.Person.FirstName
  fullName: TestDocs.Class1.Person.FirstName
- uid: TestDocs.Class1.Person.LastName*
  commentId: Overload:TestDocs.Class1.Person.LastName
  name: LastName
  nameWithType: Class1.Person.LastName
  fullName: TestDocs.Class1.Person.LastName
